文件系统
    ◆文件和目录被组织成一个单根倒置树结构
    ◆文件系统从根目录下开始,用"/"表示
    根文件系统( rootfs): root filesystem
    ◆文件名称区分大小写
    ◆以开头的文件为隐藏文件
    ◆路径分隔的/
    ◆文件有两类数据:
        元数据: metadata
        数据:data
    ◆文件系统分层结构: LSb Linux Standard base
    ◆FHS: (Filesystem Hierarchy Standard)
    http://www.pathname.com/fhs/

文件系统结构
    ◆ /boot:    引导文件存放目录,内核文件(vmlinuz),引导加载器(bootloader,grub)都存放于此目录
    ◆ /bin:     所有用户使用的基本命令;不能关联至独立分区，OS启动既会用到的程序
    ◆ /sbin:    管理类的基本命令:不能关联至独立分区，OS启动既会用到的程序
    ◆ /lib:     启动时程序依赖的基本共享库文集以及内核模块文集(/lib/modules)
    ◆ /etc:     配置文件目录
    ◆ /home/USERNAME:   普通用户家目录
    ◆ /tooe:    管理员的家目录
    ◆ /media:   便携式移动设备挂载点
    ◆ /mnt:     临时文件系统挂载点
    ◆ /dev:     设备文件及特殊文件存储位置
        b: block device,        随机访问
        c: character device,    线性访问
    ◆ /opt:     第三应用程序的安装位置
    ◆ /srv:     系统上运行的服务用到的数据
    ◆ /tmp:     临时文件存储位置
    ◆ /usr:     universal shared,read-only data
        bin:    保证系统拥有完整功能而提供的应用程序
        sbin:   
        lib:    32位使用
        lib64:  只存在64位系统
        include: C 程序的头文件(header files)
        share:  结构化独立的数据,例如doc,man等
        local:  第三方应用程序的安装位置
            bin,sbin,lib,lib64,etc,share
    ◆ /var:     variable date files 
        cahe:   应用程序缓存数据目录
        lib:    应用程序状态信息数据
        local:  专用于位/usr/local下的应用程序存储可变数据;
        lock:   锁文件
        log:    日志目录及文件
        opt:    转用于位/opt下的应用程序存储可变数据;
        run:    运行中的进程相关数据,通常用于存储进程pod文件
        spool:  应用程序数据池
        tmp:    保存系统两次重启之间产生的临时数据
    ◆ /prov:    用于输出内核与进程信息相关的虚拟文件系统
    ◆ /sys:     用于输出当前系统上硬件设备相关虚拟文件系统
    ◆ /selinxu: ecurity enhanced Linux,selinxu相关的安全策略的存储位置

Linux上的应用程序的组成部分
    ◆二进制程序: /bin,/sbin,/usr/bin,/usr/sbin,/usr/local/bin,/usr/local/sbin
    ◆库文件:    /lib,/lib64,/usr/lib,/usr/lib64,/usr/local/lib,/usr/local/lib64
    ◆配置危机:  /etc,/etc/DIRECTORY,/usr/local/etc
    ◆帮助文件:  /usr/share/man,/usr/share/doc,/usr/local/share/man,/usr/local/ share/doc

文件名规则
    ◆文件名最长255个字节
    ◆包括路径在內文件名称最长4095个字节
    ◆蓝色->目录 绿色->可执行文件 红色-->压缩文件 浅蓝色->链接文件 灰色->其他文件
    ◆除了斜杠和NυL所有字符都有效.但使用特殊字符的目录名和文件不推荐使用，有些字符需要用引号来引用它们
    ◆标准 Linux文件系统(如ext4),文件名称大小写敏感
        例如:MAL,Mai, mail, mAiL

Linux下的文件类型
    ◆-  普通文件
    ◆d  目录文件
    ◆b  块设备
    ◆C  字符设备
    ◆|  符号链接文件
    ◆p  管道文件pipe
    ◆s  套接字文件 socket

显示当前工作目录
    ◆每个shel和系统进程都有一个当前的工作目录
    ◆CWD: current work directory
    ◆显示当前she!CWD的绝对路径
    pwd: printing working directory
        -P显示真实物理路径
        -L显示链接路径(默认)

绝对和相对路径
    ◆绝对路径
        以正斜杠开始
        完整的文件的位置路径
        可用于任何想指定一个文件名的时候
    ◆相对路径名
        不以斜线开始
        指定相对于当前工作目录或某目录的位置
        可以作为一个简短的形式指定一个文件名
    ◆基名: basename
    ◆目录名: dirname

更改目录
    ◆cd改变目录
    使用绝对或相对路径
        cd /home/wang/
        cd home/wang
    切换至父目录    cd..
    切换至当前用户主目录:   cd
    切换至以前的工作目录:   Cd-
    ◆选项:-P
    ◆相关的环境变量:
        PWD:当前目录路径
        OLDPWD:上一次目录路径

列出目录内容
    ◆列出当前目录的内容或指定目录
    ◆用法:ls[ options][ es or di/s
    ◆示例
        ls   -a      包含隐藏文件
        ls   -l      显示额外的信息
        ls   -R      目录递归通过
        ls   -ld     目录和符号链接信息
        ls   -1      文件分行显示
        ls   -S      按从大到小排序
        ls   -t      按 mtime排序
        ls   -u      配合-t选项,显示并按 atime从新到旧排序
        ls   -U      按目录存放顺序显示
        ls   -X      按文件后缀排序
    
文件通配符
    ◆*          大匹配零个或多个字符
    ◆?          匹配任何单个字符
    ◆~          当前用户家目录
    ◆~mage      用户mage家目录
    ◆~+         当前工作目录
    ◆~-         前一个工作目录
    ◆[0-9]      匹配数字范围
    ◆[a-z]:     字母
    ◆[A-z]:     字母
    ◆[Wang]     匹配列表中的任何的一个字
    ◆[^Wang]    匹配列表中的所有字符以外的字符
    ◆预定义的字符类: man7 gob
    ◆[:digit:]: 任意数字,相当于0-9
    ◆[:loWer:]: 任意小写字母
    ◆[upper:]:  任意大写字母
    ◆[:alpha:]: 任意大小写字母
    ◆[:anum:]:  任意数字或字母
    ◆[:blank:]: 水平空白字符
    ◆[:space:]: 水平或垂直空白字符
    ◆[:punct:]: 标点符号
    ◆[:print:]: 可打印字符
    ◆[:[cntr:]: 控制(非打印)字符
    ◆[:graph:]: 图形字符
    ◆[:Digit:]: 十六进制字符
    练习
        1、显示/var目录下所有以l开头,以一个小写字母结尾,且中间出现至少一位数字的文件或目录
        示例: ls /var/l*[[:digit:]]*[[:lower:]]
        2、显示/etc目录下以任意一位数字开头,且以非数字结尾的文件或目录
        示例: ls -d /etc/[0-9]*[^0-9] 
        3、显示/etc/目录下以非字母开头,后面跟了一个字母及其它任意长度任意字符的文件或目录
        示例: ls -d [^[:alpha:][[:alpha:]]*
        4、显示/etc/目录下所有以rc开头,并后面是0-6之间的数字,其它为任意字符的文件或目录
        示例: ls -d /etc/rc[0-6]*
        5、显示/etc目录下,所有以d结尾的文件或目录
        示例: ls -d /etc/*.d -d
        6、显示et目录下,所有con结尾,且以mn,p开头的文件或目录
        示例: ls ls -d /etc/[mnrp]*.conf
        7、只显示/root下的隐藏文件和目录
        示例: ls -d /root/.*
              ls -aI "[^.]*"  
        8、只显示/etc下的非隐藏目录
        示例: ls -d /etc/*/

关闭防火墙
    CentOS7 
        systemctl stop firewalld
        systemctl disable firewalld
    CentOS6
        service iptables stop
        chkconfig iptables off 

创建空文件和刷新时间
    ◆touch命令
    ◆格式:touch [OPTION]...FILE...
        -a  仅改变 atime和ctime
        -m  仅改变 mtime和ctime
        -t  [[CC]YY]MMDDhhmm[.ss]
                指定atime和mtime的时间戳
        -c  如果文件不存在，则不予创建

复制文件和目录cp
    ◆cp [OPTION]...[-T] SOURCE DEST
    ◆cp [OPTION]...SOURCE...DIRECTORY
    ◆cp [OPTION]...-t DIRECTORY SOURCE...
    ◆cp SRC DEST
    SRC是文件
        如果目标不存在: 新建DEST,并将SRC中内容填充至DEST中
        如果目标存在:
            如果 DEST 是文件: 将 SRC中的内容覆盖至 并将SRC中
                基于安全,建议为cp命令使用-i选项
            如果 DEST是目录: 在 DEST下新建与原文件同名的文件, 并将 SRC中的内容填充至新文件中
    cp常用选项
    ◆-i:    覆盖钱提示  -n:  不覆盖，注意两者顺序
    ◆-r,-R: 递归复制目录及内容的所有内容
    ◆-a:    归档，相当于-dR --preserv=all
    ◆-d:    --no-dereferrnce --preserv=links 不复制原文件,只复制链接名
    ◆--preserv[=ATTR_LIST]
        mode: 权限
        ownership: 属主属组
        timestamp:
        links
        xattr
        context
        all
    ◆-p:    等同--preserv=node,ownership,timestamp
    ◆-v:    --verbose
    ◆-f:    --force
    ◆-u:    --update 只复制源比目标更新文件或者目标不存在的文件
    ◆-b:    目标存在,覆盖前先备份
    ◆--backup=numbered  目标存在，覆盖前线备份加数字后缀

    练习
        ◆1、定义别名命令 baked,每天将/etc/目录下所有文件,备份到/app独立的子目录下,并要求子目录格式为 backupYYYY-mm-dd,备份过程可见
        示例:   alias backetc='cp -av /etc/ ~/date/backup`date +%F`'
        ◆2、创建/app/ rootdir目录,并复制root下所有文件到该目录内,要求保留原有权限
        示例:   cp -vrp /root/ ./rootdir

移动和重命名文件
    ◆mv [OPTION]...[-T]SOURCE DEST
    ◆mv [OPTION]...SOURCE...DIRECTORY
    ◆mv [OPTION]...-t DIRECTORY SOURCE
        常用选项:
            -i: 交互式
            -f: 强制
            -b: 目标存在，覆盖前先备份

删除
    ◆rm [OPTION...FILE
    ◆常用选项:
        -i  交互式
        -f  强制删除
        -r  递归
        --on-preserv-root 删除/
    ◆示例:
        rm -rf /

目录操作
    ◆tree 显示目录树
        -d:         只显示目录
        -L level:   指定显示的层级数目
        -P pattern: 只显示有指定 pattern匹配的路径
    ◆mkdir 创建目录
        -p:     存在于不报错,且可自动创建所需的各目录
        -v:     显示详细信息
        -m MODE:创建目录时直接指定权限
    ◆rmdir 删除空目录
        -p:     递归删除父系空目录
        -v:     显示详细信息
    ◆rm -r 递归删除目录树

    练习
        ◆如何创建 /testdir/dir1/x,/testdir/dir1/y,/testdir/dir1/x/a,/testdir/dir1/x/b,/testdir/dir1/y/a/,/testdir/dir1/y/bin
            示例:   mkdir -p testkdir/dir/{x,y}/{a,b}
        ◆如何创建 /testdir/dir2/x,/testdir/dir2/y,/testdir/dir2/x/a,/testdir/dir2/x/b
            示例:   mkdir -p testdir/dir2/{x/{a,b},y}
        ◆如何创建 /testdir/dir3,/testdir/dir4,/testdir/dir5,/testdir/dir5/dir6,/testdir/dir5/dir7
            示例:   mkdir -p testdir/{dir5/{dir6,dir7},dir3,dir4}
                    mkdir -p testdir/{3,4,5/{dir6,dir7}}
                    mkdir -p testdir/{3,4,5/dir{6,7}}

索引节点
    ◆inode (index node) 表中包含文件系统所有文件列表
    ◆一个节点(索引节点)是一个表项，包含有关文件的信息(元数据),包括
        文件类型，权限，UID，GID
        链接数(指向这个文件名路径称个数)
        该文件大小和不同的时间戳
        指向磁盘上文件的数据块指针
        有关文件的其他数据
    
硬连接
    ◆创建硬连接会增加额外的记录项以引用文件
    ◆对应于同一文件系统上的一个物理文件
    ◆每个目录引用相同的inod号
    ◆创建时连接数递增
    ◆删除文件时:
        rm命令递减计数的连接
        文件要存在，至少有一个连接数
        当连接数为零时，该文件被删除
    ◆不能跨越驱动器或分区
    ◆语法
        in filename [linkname]

符号(或软)链接
    ◆一个符号链接指向另一个文件
    ◆ls -l的显示链接的名称和引用的文件
    ◆一个符号链接的内容是它引用文件的名称
    ◆可以对目录进行
    ◆可以跨分区
    ◆指向的是另一个文件的路径;其大小为指向路径字符串的长度;不增加或减少目标文件的inode的引用计数.
    ◆语法:
        ln -s filename [linkname ]

确定文件内容
    ◆文件可以包含多种类型的数据
    ◆检查文件的类型，然后确定合适的打开命令或应用程序使用
    ◆file [options]<filename>
    ◆常用选项
        -b  列出文件识别结果时，不显示文件名称
        -f  filelist列出文件filelist中文件名后默认的':'分割符
        -L  查看对应软连接对应文件的文件类型
        --help  显示命令在线帮助

 标准输入和输出
    ◆程序: 指令+数据
        读如时间:   input
        输出数据:   output
    ◆打开的文件都有一个fd:file descriptor(文件描述符)
    ◆Linxu 给程序提供三种I/O设备
        标准输入(STDIN) -0 默认接受来自键盘的输入
        标准输出(STDOUT) -1 默认输出到终端窗口
        标准错误(STDERR) -2 默认输出到终端窗口
    ◆I/O重定向:改变默认位置

    把输出和错误重新定向到文件
        ◆STDOUT 和 STDERR 可以被重新定向到文件
                命令    操作符号    文件名 
            支持的操作符号包括:
                >   把 STDOUT 重新定向到文件
                2>  把 STDERR 重新定向到文件
                &>  把所有输出重新定向到文件
        ◆> 文件内容会被覆盖
            set -C 禁止将内容覆盖已有文件，但可追加
            >|file 强制覆盖
            set +C 允许覆盖
        ◆>>原有内容基础上，追加内容
        
tr命令
    ◆tr 转换和删除字符
    ◆tr [OPTION]...SET1[SET2]
    ◆选项:  
        -c -C --complement: 取字符集的补集
        -d --delete:        删除所有属于第一个字符集的字符
        -s --squeeze-repeats:把连续重复的字符一单独一个字符表示
        -t --truncate-set1: 将第一个字符集对应字符转化为第二字符集对应的字符
        [:alnum:]:  字母和数字
        [:alpha:]:  字母
        [:cntrl:]:  控制(非打印)字符 
        [:digit:]:  数字
        [:graph:]:  图形字符
        [:lower:]:  小写字母
        [:print:]:  可打印字符
        [:punct:]:  标点符号
        [:space:]:  空白字符
        [:upper:]:  大写字母
        [:xdigit:]: 十六进制字符

    练习
        ◆1、将/etc/issue文件中的内容转换为大写后保存至/tmp/ Issue.out文件中

        ◆2、将当前系统登录用户的信息转换为大写后保存至/tmp/who.out文件中

        ◆3、一个linux用户给root发邮件,要求邮件标题为"help",郾件正文如下Hello,I am用户名 The system version is here, please help me to check it, thanks!操作系统版本信息

        ◆4、将/root/下文件列表,显示成一行,并文件名之间用空格隔开

        ◆5、计算1+2+3+.+99+100的总和
            示例:   echo {1..100} | tr ' ' + | bc
        ◆6、删除 Windows文本文件中的'^M'字符
            示例:   cat f1  | tr -d '\r' >f2
        ◆7、处理字符串"xt.,l 1 jr #!$mn 2 c*/e 3 uz 4"只保留其中的数字和空格
            示例:   echo 'xt.,l 1 jr #!$mn 2 c*/e 3 uz 4;' | tr -dc '[0-9 ]'
        ◆8、将PATH变量每个目录显示在独立的一行

        ◆9、将指定文件中0-9分别替代成a-j

        ◆10、将文件/etc/centos- release中每个单词(由字母组成)显示在独立一行,并无空行

把多行发送给STD|N
        ◆使用“<<终止词”命令从键盘把多行重导向给STDN
            直到终止词位置的所有文本都发送给STDN
            有时被称为就地文本( pretext)
                >mail-s"PleaseCall"admin@maged.com<<END
                >Hi Wang
                >
                >Please give me a call when you get in we may need
                >to do some maintenance on server 1
                >
                >Details when you're on-site
                >Zhang
                >END
    
管道
    ◆管道(使用符号“|”表示)用来连接命令
        命令1|命令2|命令3
            将命令1的STDOUT发送给命令2的STDIN，命令的STDOUT发送到命令3的STDIN
            STDERR默认不能通过管道转发，可利用2>&1 或|&实现
            最后一个命令会在当前sheel进程的字sheel进程中执行用来
            组合多种工具的功能
            ls |tr 'a-z' 'A-Z'
    ◆less:  一页一页的查看
        ls -l /etc | less
    ◆mail:  通过电子邮件发送输入
        echo "test email" |mail -s "test" uesr@examp;e.com
    ◆lpr:   把输入发送给打印机
        echo "test print" |lpr -P printer_name
    
    符号
        ◆将 /home 里的文件打包，但打包的数据不是记录到文件而是发到stdout，经过管道后，将tar -cvf- /home传送给后面的tar -cvf-，后面这个 - 则是取前2一个命令的stdout，因此，就不需要使用临时file了
        ◆tar -cvf- /home |tar -xvf-

重定向到多个目标
    ◆命令1 | tee [a] 文件名 | 命令2
        把命令1的 STDOUT保存在文件中,做为命令2的输入
        a追加
    ◆使用:
        保存不同阶段的输出
        复杂管道的故障排除
        同时查看和记录输出