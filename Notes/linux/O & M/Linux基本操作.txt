    硬件信息:
        CPU信息
            lscpu

        内存使用情况
            free -h
            cat /proc/meminfo

        硬盘
            lsblk

        网卡
            mii-tool (网卡名称)
    
    终端窗口
        tty
    
    关机，重启
        poweroff
        reboot
    
    用户ID
        uid -u
    
    配置文件生效
        . 路径/文件

    终端Terminal
        设备终端
            键盘鼠标显示器
        物理终端( /dev/console)
            控制台(console)
        虚拟终端(tty: teletypewriters, /dev/tty # #为[1-6])
            tty 可有n个, Ctrl+Alt+F[1-6]
        图形终端( /dev/tty7) startx, xwindows
            CentOS 6: Ctrl+Alt+F7
            CentOS 7: 在哪个终端启动,即位于哪个虚拟终端
        串行终端(/dev/ttyS#)
            ttyS
        伪终端(pty: pseudo-tty, /dev/pts/#)
            pty,SSH远程连接
        查看当前终端设备:
            tty
             
    交互式接口
        交互式接口:启动终端后,在终端设备附加一个交互式应用程序。
        GUI:Graphic User Interface
            X protocol.window managrt.desktop
                Desktop:
                    GNOME   (C,图形库gtk)
                    KDE     (C++,图形库qt)
                    XFCE    (轻量级桌面)
        CLI:Command Line Interface
        shell程序:sh (bourn 史蒂夫·伯恩)csh tcsh ksh(korn) bash(bourn again shell)Gpl zsh
            CentOS shell 目录
                cat /etc/shells
            查看当前系统使用shell 类型
            echo $SHELL 
        bash shell
            GNU Bourne-Again Shell(bash)是GNU计划中重要的工具软件之一，目前也是Linux标准的 shell,于sh兼容
            CentOS默认使用

    命令提示符
        命令提示符: prompt
            [root@localhost ~]#
                # 管理员
                $ 普通用户
        显示提示符格式
            [root@localhost ~]#echo $PS1
        修改提示符格式
            PS1="\[\e[1;5;41;33m\][\u@\h \W]\\$[\e[0m\]"
            \e \033                         \u 当前用户
            \h 主机名简称                    \H 主机名
            \w 当前工作目录                  \W 当前工作目录基名
            \t 24小时时间格式                \T 12小时时间格式
            \! 命令历史数                    \# 开机后命令历史数
            实例
                CentOS,Ubuntu
                保存文件到/root/.bashrc 第52行
                    PS1="\[\e[37;40m\][\[\e[1;31m\]\u\[\e[1;34m\]|\h \[\e[1;33m\]\w\[\e[0m\]]\\$ "
                
                CentOS
                编辑文件到/etc/profile.d/[NAME].sh
                    PS1="\[\e[37;40m\][\[\e[1;31m\]\u\[\e[1;34m\]|\h \[\e[1;33m\]\w\[\e[0m\]]\\$ "


    执行命令
        输入命令后回车
            提请shell程序找到键入命令所对应的可执行程序或代码，并由其分析后提交给内核分配资源将其运行起来
        在shell中可执行的命令有两类
            内部命令:由shell自带，而且通过某个命令形式提供
                help 内部命令列表
                enable [NAME] 启用内部命令
                enable -n [NAME] 禁用内部命令
                enable -n 查看所有禁用的内部命令
        外部命令:在文件系统路径下有对应的可用执行程序文件
            查看路径:which -a|--skip-alias;whereis
        区别指定的命令是内部或外部命令
            type [NAME]
        命令执行过程
        alias->内部->hash表(记录外部命令的路径)->$PATH->命令找不到

        执行外部命令
            Hash 缓冲表
                系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将这条命令的路径记录到hash表中，当再次使用该命令时，shell解析器首先会查看hash表，存在将执行之，如果不存在，将会去PATH路径下找，利用hash缓冲表可大大提高命令的调用速率
            hash常见用法
                hash        显示hash缓存
                hash    -l  显示hash缓存，可作为输入使用
                hash    -p  path name 将命令全路径path起别名为name
                hash    -t  name 打印缓存中的name的路径
                hash    -d  name 清除name缓存
                hash    -r  清除缓存
    
    命令别名
        显示当前shell进程所有可用的命令别名
            alias
        定义别名NAME，其相当于执行命令VALUE
            alias NAME='value'
        在命令行中定义的别名，仅对当前shell进程有效
        如果想永久有效，要定义在配置文件中
            仅对当前用户有效: ~/.bashrc
            对所有用户有效: /etc/bashrc
        编辑配置给出的新配置不会立即生效
        bash进程重新读取配置文件
            source /path/to/config_file
            .      /path/to/config_file
        撤销别名: unalias
            unalias [-a]name[name...]
            -a  取消所有别名
        如果别名同命令同名，如果要执行原命令，可使用
            \ALIASNEME
            "ALIASNEME"
            'ALIASNEME'
            command ALIASNEME
            /path/command
            
    命令格式
        COMMADN[OPTINS...][ARGUMENTS]
            选项:用于启用或关闭命令的某个或某些功能
                短选项: -c  例如:   -l ,-h
                长选项: --work  例如:   --all,--human-readable
            参数:命令的作用对象，比如文件名，用户名等
        注意
        多个选项以及多参数和命令之间使用空白字符隔离
        取消和结束命令执行:Ctrl+c,Ctrl+d
        多命令可以用 ; 符号分开
        一个命令可以用\分成多行
    
    日期和时间
        Linux的两种时钟
            系统时钟:   由Linux内核通过CPU的工作频率进行的
            硬件时钟:   主板
        相关指令
            date    显示和设置系统时间
                    date +%s
                    date -d @150936033
            hwclock,clock:显示硬件时钟
                -s, --hctosys 以硬件时钟为准，校正系统时钟
                -w, --systohc 以系统时间为准，校正硬件时钟
        时区:   /etc/localhost
        显示日历:   cal -y 

    简单命令
        关机:   halt,poweroff
        重启:   reboot
                -f:强制，不调用shutdown
                -p:切断电源
        关机或重启: shutdown
            shutdown[OPTINS]...[TIME][MESSAGE]
                -r: reboot
                -h: halt
                -c: cancel
        TIME:   无指定，默认相当于+1(CentOS 7)
            now:立刻，相当于+0
            +m: 相对时间表示法，几分钟后；例如+3
            hh:mm:  绝对时间表示，指明时间
        用户登入信息查看命令
            whoami: 显示当前登入有效用户
            who:    系统当前所有登入会话
            w:      系统当前所有的登入会话及所做的操作

        nano:   文本编辑

        screen 命令:
            创建新 screen 会话
                screen -S [SESSION] 
            加入 screen 会话
                screen -x [SESSION]
            退出并关闭 screen 会话
                exit
            剥离 screen 会话
                Ctrl+a,d
            显示所有已经打开的 screen 会话
                screen -ls
            恢复 screen 会话
                screen -r [SESSION]
            
    echo命令
        功能:   显示字符
        语法:   echo[-neE][字符串]
        说明:   echo会将输入的字符串送到标准输出。输出的字符串间以白字符隔开并在最后加上换行号
        选项:   
            -E  (默认)不支持\解释功能
            -n  不自动换行
            -e  启用\字符的解释功能
        显示变量
            echo "$VAR_NAME"    变量会替换，弱引用
            echo "$VAR_NAME"    变量不会替换，强引用
        启用命令选项 —e,若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出
        \a      发出警告声
        \b      退格键
        \c      最后不加上换行符号
        \n      换行且光标移至行首
        \r      回车，即光标移至行首，但不换行
        \t      插入tab
        \\      插入\字符
        \0nnn   插入nnn(八进制)所代表的 ASCII 字符
            echo -e '\033[43;31;5mmmage\033[0m'
        \xHH    插入HH(十六进制)所代表的 ASCII 数字(man 7 ascii)

        宇符集和编码
            ASCII码:计算机内部,所有信息最终都是一个二进制值。上个世纪60年代,美国制定了一套字符编码,对英语字符与二进制位之间的关系,做了统一规定。ASCII码一共规定了128个字符的编码,占用了一个字节的后面7位,最前面的位统一规定为0
            Unicode:用于表示世界上所有语言中的所有字符。每一个符号都给予一个独无二的编码数字, Unicode是一个很大的集合,现在的规模可以容纳100多万个符号。 Unicode仅仅只是一个字符集,规定了每个字符对应的二进制代码至于这个二进制代码如何存储则没有规定
            Unicode编码方案
                UTF-8:变长,1到4个字节
                UTF-16:变长,2或4个字节
                UTF-32:固定长度,4个字节
            ∪TF-8是目前互联网上使用最广泛的一种 Unicode编码方式,可变长存储。使用1-4个字节表示一个字符,根据字符的不同变换长度。编码规则如下对于单个字节的字符,第一位设为0,后面的7位对应这个字符的 Unicode码。因此,对于英文中的0-127号字符,与ASC码完全相同。这意味着ASC码的文档可用UTF-8编码打开对于需要使用N个字节来表示的字符(N>1),第一个字节的前N位都设为1,第N+1位设为0,剩余的N-1个字节的前两位都设位10,剩下的二进制位则使用这个字符的∪nicole码来填充
            ◆编码转换和查询
                https://javawind.net/tools/native2asciijsp?action=transform
                http://tool.oschina.net/encode
                http://www.chi2ko.com/tool/cjk.htm
        实例
            echo [字符] $(code)
                echo my username is $(whoami)
                echo OS version is $(cat /etc/centos-release)
                echo kernel version is $(uname -r)
        命令行扩展、被括起来的集合
            ◆命令行扩展:$()或
                令的输出打印给另一个命令的参数
                echo "This system's name is $(hostname)
                This system's name is erver1.example.com
                echo "i am 'whoami'"
                i am root
            ◆括号扩展:{}
                打印重复字符串的简化形式
                    echo file{1,3,5} 结果为: file1 file3 file5
                    rm -f file{1,3,5}
                    echo{1..10}
                    echo{a..z}
                    echo{000..20..2}
        实例
            显示系统语言
                echo $LANG
                更换成中文，需要重启
                    localectl set-locale LANG=zh_CN.utf8
                    显示支持的语言
                    localectl list-locales
            
        Tab键
            命令补全
                内部命令:   
                外部命令:   bash根据 PATH 环境变量定义的路径，自左而右在每个路径搜索以给定的命令名命名的文件，第一次找到的命令即为要执行的命令
                            用户给定的字符串只有一条唯一对应的命令，直接补全
                            否则，再次 Tab 键会给出列表
                路径补全:   把用户给出的字符串当做开头，并在指定上级目录下搜索以指定的字符串开头的文件名
                            如果唯一:   则直接补全
                            否则:       再次 tab 给出列表

        获得帮助
            获取帮助的能力决定了技术的能力
            ◆多层次的帮助
            Whatis
            command
            man and info
            /usr/share/doc/
            Red hat documentation
            其它网站和搜索